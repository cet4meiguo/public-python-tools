#!/usr/bin/env python 2.7
#-*- coding:utf-8 -*-
"""
爬虫：爬tumblr

modify nick,and run.
python 正则表达式参考:http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html

"""
import urllib2
import urllib
import re
import os 
import threading
import time
nick='softform' #Modify this nick,and run.
rootPath='e:/jp/'  #本地保存文件夹.
jobs=200
page=2880
def gethtml(url):
    """
    获取网页内容,并保存到本地.返回内容.
    """
    try:
        headers = {'User-Agent':'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22'}
        req = urllib2.Request(url,None,headers)
        response = urllib2.urlopen(req)
        html = response.read()
        response.close()
        return html
    except urllib2.HTTPError, exc:
        if exc.code == 404:
            print "Not found !"
        else:          
            print "HTTP request failed with error %d (%s)" % (exc.code, exc.msg)
    except urllib2.URLError, exc:
        print "Failed because:", exc.reason

            
class Timer(threading.Thread):
    def __init__(self,num,interval,nick):
        threading.Thread.__init__(self)
        self.thread_num=num
        self.interval = interval
        self.thread_stop=False
    def stop(self):
        self.thread_stop = True
    def run(self):
        global page                 # for modify 
        while not self.thread_stop:
            threadLock.acquire()    # Lock page num.
            page = page+1
            threadLock.release()    #
            
            if page>6000:
                self.stop()
            try:
                urllib.urlretrieve('http://a-hadaka.jp/uploads/thumbsmyalbum1_m2/%d.jpg' % (page),'e:/jp/'+str(page)+".jpg")
            except:
                urllib.urlretrieve('http://a-hadaka.jp/uploads/thumbsmyalbum1_m2/%d.jpg' % (page),'e:/jp/'+str(page)+".jpg")
            print('e:/jp/'+str(page)+".jpg")
            #time.sleep(self.interval)
try:
    os.makedirs(rootPath)   #创建目录
except (WindowsError):
    pass
threads=[]
threadLock=threading.Lock()
for i in range(jobs):
    t=Timer(i,2,nick)
    t.start()
    threads.append(t)
for t in threads:
    t.join()
print('End')
